buildscript {
    project.group = 'ch.tutteli.niok'
    rootProject.version = '1.4.0-SNAPSHOT'
    project.description = "API for java.nio.file in a Kotlin idiomatic way"


    ext {
        // main
        kotlin_version = '1.4.21-2'

        // test
        atrium_version = '0.15.0'
        tutteli_spek_extensions = '1.1.0'

        // detekt/sonarcloud
        detekt_version = '1.15.0'

        // project setup
        tutteli_plugins_version = '0.33.1'
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "ch.tutteli:tutteli-gradle-dokka:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-kotlin-module-info:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-kotlin-utils:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-publish:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-spek:$tutteli_plugins_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

apply plugin: "ch.tutteli.project.utils"
apply plugin: 'ch.tutteli.kotlin.utils'
kotlinutils.kotlinVersion = kotlin_version

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
}

apply plugin: 'kotlin'
apply plugin: 'ch.tutteli.dokka'
apply plugin: 'ch.tutteli.spek'

apply plugin: 'ch.tutteli.kotlin.module.info'
apply plugin: 'ch.tutteli.publish'

sourceCompatibility = 8
targetCompatibility = 8

dependencies {
    implementation kotlinStdlib()
    implementation kotlinReflect()

    testImplementation "ch.tutteli.atrium:atrium-fluent-en_GB:$atrium_version", excludeKotlin
    testImplementation "ch.tutteli.atrium:atrium-api-fluent-en_GB-jdk8:$atrium_version", excludeKotlin
    testImplementation "ch.tutteli.spek:tutteli-spek-extensions:$tutteli_spek_extensions", excludeKotlin
}

apply plugin: "io.gitlab.arturbosch.detekt"
detekt {
    failFast = true
    config = files("$rootProject.projectDir/gradle/scripts/detekt.yml")
    reports {
        xml.enabled = true
    }
}

/*

Release & deploy a commit
--------------------------------
export NIOK_PREVIOUS_VERSION=1.3.4
export NIOK_VERSION=1.4.0
perl -0777 -i \
  -pe "s@$NIOK_PREVIOUS_VERSION@$NIOK_VERSION@g;" \
  -pe "s/project.version = '$NIOK_VERSION-SNAPSHOT'/rootProject.version = '$NIOK_VERSION'/;" \
  ./build.gradle
perl -0777 -i \
  -pe "s@$NIOK_PREVIOUS_VERSION@$NIOK_VERSION@g;" \
  -pe 's/(<!-- for master -->\n)\n([\S\s]*?)(\n<!-- for a specific release -->\n)<!--\n([\S\s]*?)-->\n(\n# Niok)/$1<!--\n$2-->$3\n$4\n$5/;' \
  ./README.md
git commit -a -m "v$NIOK_VERSION"

1. search for X.Y.Z-SNAPSHOT and replace with X.Y.Z
2. update master:
    b) commit (modified build.gradle and README.md)
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) java -version 2>&1 | grep "version \"11" && CI=true ./gradlew clean publishToBintray
    b) Log in to bintray, check that there are 20 artifacts which needs to be published; publish them
    c) synchronise to maven central
5. create release on github

Prepare next dev cycle
-----------------------
1. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
2. search for X.Y.Z and replace with X.Y.Z-SNAPSHOT
3. commit & push changes

*/
