var pages = [{"name":"val Path.absolutePathAsString: String","description":"ch.tutteli.niok.absolutePathAsString","location":"niok/ch.tutteli.niok/absolute-path-as-string.html","searchKeys":["absolutePathAsString","val Path.absolutePathAsString: String"]},{"name":"fun Path.appendBytes(array: ByteArray)","description":"ch.tutteli.niok.appendBytes","location":"niok/ch.tutteli.niok/append-bytes.html","searchKeys":["appendBytes","fun Path.appendBytes(array: ByteArray)"]},{"name":"fun Path.appendText(text: String, charset: Charset = Charsets.UTF_8)","description":"ch.tutteli.niok.appendText","location":"niok/ch.tutteli.niok/append-text.html","searchKeys":["appendText","fun Path.appendText(text: String, charset: Charset = Charsets.UTF_8)"]},{"name":"fun Path.copyRecursively(target: Path, overwrite: Boolean = false, onError: (Path, IOException) -> OnErrorAction = { _, exception -> throw exception }): Boolean","description":"ch.tutteli.niok.copyRecursively","location":"niok/ch.tutteli.niok/copy-recursively.html","searchKeys":["copyRecursively","fun Path.copyRecursively(target: Path, overwrite: Boolean = false, onError: (Path, IOException) -> OnErrorAction = { _, exception -> throw exception }): Boolean"]},{"name":"inline fun Path.createDirectories(vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.createDirectories","location":"niok/ch.tutteli.niok/create-directories.html","searchKeys":["createDirectories","inline fun Path.createDirectories(vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.createDirectory(vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.createDirectory","location":"niok/ch.tutteli.niok/create-directory.html","searchKeys":["createDirectory","inline fun Path.createDirectory(vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.createDirectoryIfNotExists(vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.createDirectoryIfNotExists","location":"niok/ch.tutteli.niok/create-directory-if-not-exists.html","searchKeys":["createDirectoryIfNotExists","inline fun Path.createDirectoryIfNotExists(vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.createFile(vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.createFile","location":"niok/ch.tutteli.niok/create-file.html","searchKeys":["createFile","inline fun Path.createFile(vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.createFileIfNotExists(vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.createFileIfNotExists","location":"niok/ch.tutteli.niok/create-file-if-not-exists.html","searchKeys":["createFileIfNotExists","inline fun Path.createFileIfNotExists(vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.createLink(link: Path): Path","description":"ch.tutteli.niok.createLink","location":"niok/ch.tutteli.niok/create-link.html","searchKeys":["createLink","inline fun Path.createLink(link: Path): Path"]},{"name":"inline fun Path.createSymbolicLink(link: Path, vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.createSymbolicLink","location":"niok/ch.tutteli.niok/create-symbolic-link.html","searchKeys":["createSymbolicLink","inline fun Path.createSymbolicLink(link: Path, vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.delete()","description":"ch.tutteli.niok.delete","location":"niok/ch.tutteli.niok/delete.html","searchKeys":["delete","inline fun Path.delete()"]},{"name":"inline fun Path.deleteIfExists(): Boolean","description":"ch.tutteli.niok.deleteIfExists","location":"niok/ch.tutteli.niok/delete-if-exists.html","searchKeys":["deleteIfExists","inline fun Path.deleteIfExists(): Boolean"]},{"name":"fun Path.deleteRecursively(): Boolean","description":"ch.tutteli.niok.deleteRecursively","location":"niok/ch.tutteli.niok/delete-recursively.html","searchKeys":["deleteRecursively","fun Path.deleteRecursively(): Boolean"]},{"name":"val Path.exists: Boolean","description":"ch.tutteli.niok.exists","location":"niok/ch.tutteli.niok/exists.html","searchKeys":["exists","val Path.exists: Boolean"]},{"name":"val Path.extension: String","description":"ch.tutteli.niok.extension","location":"niok/ch.tutteli.niok/extension.html","searchKeys":["extension","val Path.extension: String"]},{"name":"val Path.fileNameAsString: String","description":"ch.tutteli.niok.fileNameAsString","location":"niok/ch.tutteli.niok/file-name-as-string.html","searchKeys":["fileNameAsString","val Path.fileNameAsString: String"]},{"name":"val Path.fileNameWithoutExtension: String","description":"ch.tutteli.niok.fileNameWithoutExtension","location":"niok/ch.tutteli.niok/file-name-without-extension.html","searchKeys":["fileNameWithoutExtension","val Path.fileNameWithoutExtension: String"]},{"name":"val Path.fileStore: FileStore","description":"ch.tutteli.niok.fileStore","location":"niok/ch.tutteli.niok/file-store.html","searchKeys":["fileStore","val Path.fileStore: FileStore"]},{"name":"inline fun Path.followSymbolicLink(): Path","description":"ch.tutteli.niok.followSymbolicLink","location":"niok/ch.tutteli.niok/follow-symbolic-link.html","searchKeys":["followSymbolicLink","inline fun Path.followSymbolicLink(): Path"]},{"name":"fun Path.forEachLine(charset: Charset = Charsets.UTF_8, action: (line: String) -> Unit)","description":"ch.tutteli.niok.forEachLine","location":"niok/ch.tutteli.niok/for-each-line.html","searchKeys":["forEachLine","fun Path.forEachLine(charset: Charset = Charsets.UTF_8, action: (line: String) -> Unit)"]},{"name":"inline fun Path.getAttribute(attribute: String, vararg linkOptions: LinkOption): Any","description":"ch.tutteli.niok.getAttribute","location":"niok/ch.tutteli.niok/get-attribute.html","searchKeys":["getAttribute","inline fun Path.getAttribute(attribute: String, vararg linkOptions: LinkOption): Any"]},{"name":"inline fun <V : FileAttributeView> Path.getFileAttributeView(vararg linkOptions: LinkOption): V?","description":"ch.tutteli.niok.getFileAttributeView","location":"niok/ch.tutteli.niok/get-file-attribute-view.html","searchKeys":["getFileAttributeView","inline fun <V : FileAttributeView> Path.getFileAttributeView(vararg linkOptions: LinkOption): V?"]},{"name":"val Path.invariantSeparatorsPath: String","description":"ch.tutteli.niok.invariantSeparatorsPath","location":"niok/ch.tutteli.niok/invariant-separators-path.html","searchKeys":["invariantSeparatorsPath","val Path.invariantSeparatorsPath: String"]},{"name":"val Path.isExecutable: Boolean","description":"ch.tutteli.niok.isExecutable","location":"niok/ch.tutteli.niok/is-executable.html","searchKeys":["isExecutable","val Path.isExecutable: Boolean"]},{"name":"val Path.isHidden: Boolean","description":"ch.tutteli.niok.isHidden","location":"niok/ch.tutteli.niok/is-hidden.html","searchKeys":["isHidden","val Path.isHidden: Boolean"]},{"name":"val Path.isReadable: Boolean","description":"ch.tutteli.niok.isReadable","location":"niok/ch.tutteli.niok/is-readable.html","searchKeys":["isReadable","val Path.isReadable: Boolean"]},{"name":"val Path.isRooted: Boolean","description":"ch.tutteli.niok.isRooted","location":"niok/ch.tutteli.niok/is-rooted.html","searchKeys":["isRooted","val Path.isRooted: Boolean"]},{"name":"inline fun Path.isSameFile(other: Path): Boolean","description":"ch.tutteli.niok.isSameFile","location":"niok/ch.tutteli.niok/is-same-file.html","searchKeys":["isSameFile","inline fun Path.isSameFile(other: Path): Boolean"]},{"name":"val Path.isSymbolicLink: Boolean","description":"ch.tutteli.niok.isSymbolicLink","location":"niok/ch.tutteli.niok/is-symbolic-link.html","searchKeys":["isSymbolicLink","val Path.isSymbolicLink: Boolean"]},{"name":"val Path.isWritable: Boolean","description":"ch.tutteli.niok.isWritable","location":"niok/ch.tutteli.niok/is-writable.html","searchKeys":["isWritable","val Path.isWritable: Boolean"]},{"name":"inline fun Path.move(target: Path, vararg copyOptions: CopyOption): Path","description":"ch.tutteli.niok.move","location":"niok/ch.tutteli.niok/move.html","searchKeys":["move","inline fun Path.move(target: Path, vararg copyOptions: CopyOption): Path"]},{"name":"val Path.nameWithoutExtension: String","description":"ch.tutteli.niok.nameWithoutExtension","location":"niok/ch.tutteli.niok/name-without-extension.html","searchKeys":["nameWithoutExtension","val Path.nameWithoutExtension: String"]},{"name":"inline fun Path.newBufferedReader(charset: Charset = Charsets.UTF_8): BufferedReader","description":"ch.tutteli.niok.newBufferedReader","location":"niok/ch.tutteli.niok/new-buffered-reader.html","searchKeys":["newBufferedReader","inline fun Path.newBufferedReader(charset: Charset = Charsets.UTF_8): BufferedReader"]},{"name":"inline fun Path.newBufferedWriter(charset: Charset = Charsets.UTF_8, vararg openOptions: OpenOption): BufferedWriter","description":"ch.tutteli.niok.newBufferedWriter","location":"niok/ch.tutteli.niok/new-buffered-writer.html","searchKeys":["newBufferedWriter","inline fun Path.newBufferedWriter(charset: Charset = Charsets.UTF_8, vararg openOptions: OpenOption): BufferedWriter"]},{"name":"fun Path.newDirectory(dir: String, vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.newDirectory","location":"niok/ch.tutteli.niok/new-directory.html","searchKeys":["newDirectory","fun Path.newDirectory(dir: String, vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"fun Path.newFile(file: String, vararg fileAttributes: FileAttribute<*>): Path","description":"ch.tutteli.niok.newFile","location":"niok/ch.tutteli.niok/new-file.html","searchKeys":["newFile","fun Path.newFile(file: String, vararg fileAttributes: FileAttribute<*>): Path"]},{"name":"inline fun Path.newInputStream(vararg openOptions: OpenOption): InputStream","description":"ch.tutteli.niok.newInputStream","location":"niok/ch.tutteli.niok/new-input-stream.html","searchKeys":["newInputStream","inline fun Path.newInputStream(vararg openOptions: OpenOption): InputStream"]},{"name":"inline fun Path.newOutputStream(vararg openOptions: OpenOption): OutputStream","description":"ch.tutteli.niok.newOutputStream","location":"niok/ch.tutteli.niok/new-output-stream.html","searchKeys":["newOutputStream","inline fun Path.newOutputStream(vararg openOptions: OpenOption): OutputStream"]},{"name":"inline fun Path.printWriter(charset: Charset = Charsets.UTF_8): PrintWriter","description":"ch.tutteli.niok.printWriter","location":"niok/ch.tutteli.niok/print-writer.html","searchKeys":["printWriter","inline fun Path.printWriter(charset: Charset = Charsets.UTF_8): PrintWriter"]},{"name":"inline fun Path.probeContentType(): String","description":"ch.tutteli.niok.probeContentType","location":"niok/ch.tutteli.niok/probe-content-type.html","searchKeys":["probeContentType","inline fun Path.probeContentType(): String"]},{"name":"fun Path.reCreateDirectory(): Path","description":"ch.tutteli.niok.reCreateDirectory","location":"niok/ch.tutteli.niok/re-create-directory.html","searchKeys":["reCreateDirectory","fun Path.reCreateDirectory(): Path"]},{"name":"inline fun Path.readAllBytes(): ByteArray","description":"ch.tutteli.niok.readAllBytes","location":"niok/ch.tutteli.niok/read-all-bytes.html","searchKeys":["readAllBytes","inline fun Path.readAllBytes(): ByteArray"]},{"name":"inline fun Path.readAllLines(charset: Charset = Charsets.UTF_8): List<String>","description":"ch.tutteli.niok.readAllLines","location":"niok/ch.tutteli.niok/read-all-lines.html","searchKeys":["readAllLines","inline fun Path.readAllLines(charset: Charset = Charsets.UTF_8): List<String>"]},{"name":"inline fun Path.readSymbolicLink(): Path","description":"ch.tutteli.niok.readSymbolicLink","location":"niok/ch.tutteli.niok/read-symbolic-link.html","searchKeys":["readSymbolicLink","inline fun Path.readSymbolicLink(): Path"]},{"name":"inline fun Path.readText(charset: Charset = Charsets.UTF_8): String","description":"ch.tutteli.niok.readText","location":"niok/ch.tutteli.niok/read-text.html","searchKeys":["readText","inline fun Path.readText(charset: Charset = Charsets.UTF_8): String"]},{"name":"inline fun Path.reader(charset: Charset = Charsets.UTF_8): InputStreamReader","description":"ch.tutteli.niok.reader","location":"niok/ch.tutteli.niok/reader.html","searchKeys":["reader","inline fun Path.reader(charset: Charset = Charsets.UTF_8): InputStreamReader"]},{"name":"fun Path.relativeTo(other: Path): Path","description":"ch.tutteli.niok.relativeTo","location":"niok/ch.tutteli.niok/relative-to.html","searchKeys":["relativeTo","fun Path.relativeTo(other: Path): Path"]},{"name":"fun Path.relativeToOrNull(other: Path): Path?","description":"ch.tutteli.niok.relativeToOrNull","location":"niok/ch.tutteli.niok/relative-to-or-null.html","searchKeys":["relativeToOrNull","fun Path.relativeToOrNull(other: Path): Path?"]},{"name":"fun Path.relativeToOrSelf(other: Path): Path","description":"ch.tutteli.niok.relativeToOrSelf","location":"niok/ch.tutteli.niok/relative-to-or-self.html","searchKeys":["relativeToOrSelf","fun Path.relativeToOrSelf(other: Path): Path"]},{"name":"inline fun Path.resolve(dir: String, first: String, vararg more: String): Path","description":"ch.tutteli.niok.resolve","location":"niok/ch.tutteli.niok/resolve.html","searchKeys":["resolve","inline fun Path.resolve(dir: String, first: String, vararg more: String): Path"]},{"name":"inline fun Path.setAttribute(attribute: String, value: Any, vararg linkOptions: LinkOption): Path","description":"ch.tutteli.niok.setAttribute","location":"niok/ch.tutteli.niok/set-attribute.html","searchKeys":["setAttribute","inline fun Path.setAttribute(attribute: String, value: Any, vararg linkOptions: LinkOption): Path"]},{"name":"inline fun Path.setLastModifiedTime(fileTime: FileTime): Path","description":"ch.tutteli.niok.setLastModifiedTime","location":"niok/ch.tutteli.niok/set-last-modified-time.html","searchKeys":["setLastModifiedTime","inline fun Path.setLastModifiedTime(fileTime: FileTime): Path"]},{"name":"inline fun Path.setPosixFilePermissions(perms: Set<PosixFilePermission>): Path","description":"ch.tutteli.niok.setPosixFilePermissions","location":"niok/ch.tutteli.niok/set-posix-file-permissions.html","searchKeys":["setPosixFilePermissions","inline fun Path.setPosixFilePermissions(perms: Set<PosixFilePermission>): Path"]},{"name":"val Path.size: Long","description":"ch.tutteli.niok.size","location":"niok/ch.tutteli.niok/size.html","searchKeys":["size","val Path.size: Long"]},{"name":"fun Path.toRelativeString(base: Path): String","description":"ch.tutteli.niok.toRelativeString","location":"niok/ch.tutteli.niok/to-relative-string.html","searchKeys":["toRelativeString","fun Path.toRelativeString(base: Path): String"]},{"name":"inline fun <T> Path.useLines(charset: Charset = Charsets.UTF_8, block: (Sequence<String>) -> T): T","description":"ch.tutteli.niok.useLines","location":"niok/ch.tutteli.niok/use-lines.html","searchKeys":["useLines","inline fun <T> Path.useLines(charset: Charset = Charsets.UTF_8, block: (Sequence<String>) -> T): T"]},{"name":"inline fun Path.writeBytes(array: ByteArray, vararg openOptions: OpenOption): Path","description":"ch.tutteli.niok.writeBytes","location":"niok/ch.tutteli.niok/write-bytes.html","searchKeys":["writeBytes","inline fun Path.writeBytes(array: ByteArray, vararg openOptions: OpenOption): Path"]},{"name":"inline fun Path.writeLines(lines: Iterable<CharSequence>, charset: Charset = Charsets.UTF_8, vararg openOptions: OpenOption): Path","description":"ch.tutteli.niok.writeLines","location":"niok/ch.tutteli.niok/write-lines.html","searchKeys":["writeLines","inline fun Path.writeLines(lines: Iterable<CharSequence>, charset: Charset = Charsets.UTF_8, vararg openOptions: OpenOption): Path"]},{"name":"fun Path.writeText(text: String, charset: Charset = Charsets.UTF_8)","description":"ch.tutteli.niok.writeText","location":"niok/ch.tutteli.niok/write-text.html","searchKeys":["writeText","fun Path.writeText(text: String, charset: Charset = Charsets.UTF_8)"]},{"name":"inline fun Path.writer(charset: Charset = Charsets.UTF_8): OutputStreamWriter","description":"ch.tutteli.niok.writer","location":"niok/ch.tutteli.niok/writer.html","searchKeys":["writer","inline fun Path.writer(charset: Charset = Charsets.UTF_8): OutputStreamWriter"]}]
